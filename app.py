import os
from flask import Flask, request, jsonify, render_template, session
from dotenv import load_dotenv
from thread_manager import ThreadManager
from assistant_manager import AssistantManager
import openai

# Load environment variables
load_dotenv()

client = openai.OpenAI()

app = Flask(__name__)
app.secret_key = os.getenv("SECRET_KEY")  # Load the secret key from the environment

# import secrets
# secret_key = secrets.token_hex(16)  # Generates a 32-character hexadecimal string (128 bits)
# print(secret_key)

# Flask route to render the HTML page
@app.route('/')
def index():
    return render_template('index.html')

# API endpoint to assist the employee
@app.route('/assist', methods=['POST'])
def assist():
    data = request.get_json()
    query = data.get('query')

    # Create or retrieve the user's thread
    thread_manager = ThreadManager()
    thread_manager.create_thread()

    # Add message and run assistant
    thread_manager.add_message_to_thread(role="user", content=f"Help employee with this query: {query}?")
    #run = thread_manager.run_assistant(assistant_id=AssistantManager.assistant_id, instructions=f"Help employee with this query: {query}")
    summary = thread_manager.run_assistant(assistant_id=AssistantManager.assistant_id, instructions=f"Help employee with this query: {query}")

     # Wait for the assistant to complete the task
    #thread_manager.wait_for_completion(run)

    # Get the summary generated by the assistant
    #summary = thread_manager.process_message()

    # wait for run to complete
    # create summary
    # return summary

    return jsonify({'summary': summary})

if __name__ == '__main__':

    # Instantiate the assistant manager (only creates assistant once)
    assistant_manager = AssistantManager()

    # Create a vector store caled "Financial Statements"
    vector_store = client.beta.vector_stores.create(name="Org Docs")
 
    # Ready the files for upload to OpenAI
    file_paths = ["org-data/organization_info.txt"]
    file_streams = [open(path, "rb") for path in file_paths]

    # Use the upload and poll SDK helper to upload the files, add them to the vector store,
    # and poll the status of the file batch for completion.
    file_batch = client.beta.vector_stores.file_batches.upload_and_poll(
    vector_store_id=vector_store.id, files=file_streams
    )

    assistant = client.beta.assistants.update(
        assistant_id=AssistantManager.assistant_id,
        tool_resources={"file_search": {"vector_store_ids": [vector_store.id]}},
        )
    
    # Run the Flask application
    app.run(debug=True)